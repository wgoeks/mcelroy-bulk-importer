# -*- coding: utf-8 -*- ############################################################################# Python GUI code generated with wxFormBuilder (version Sep 12 2010)## http://www.wxformbuilder.org/#### PLEASE DO "NOT" EDIT THIS FILE!############################################################################# Importer script by Wyatt Goeks, (C) 2020 ##import osimport wximport wx.htmlimport os.pathfrom os import path#import wx.Sizefrom PIL import Imagefrom wx.lib.pubsub import pubimport openpyxlfrom openpyxl.utils import get_column_letterimport csvimport xlrdimport datetimefrom datetime import dateimport sys 	# Global varsfname = None # Name to save the XLSX file undermax_photo_size = 150# Class for handling the image drop & open utilityclass DropTarget(wx.FileDropTarget):    def __init__(self, widget, name):        wx.FileDropTarget.__init__(self)        self.widget = widget        self.name = name    def OnDropFiles(self, x, y, filenames):        print(filenames)        image = Image.open(filenames[0])        image.thumbnail((max_photo_size, max_photo_size))        # image.save('thumbnail.png')        if self.name == 'm':            pub.sendMessage('dnd', filepath=image.filename)        elif self.name == '1':            pub.sendMessage('dnd1', filepath = image.filename)        elif self.name == '2':            pub.sendMessage('dnd2', filepath = image.filename)        elif self.name == '3':            pub.sendMessage('dnd3', filepath = image.filename)        elif self.name == '4':            pub.sendMessage('dnd4', filepath = image.filename)        return True############################################################################ Class htmlFrame##########################################################################class htmlFrame(wx.Frame):	def __init__(self, parent, title): 		wx.Frame.__init__(			self, 			parent, 			-1, 			title, 			size = (600,400)		)		self.SetForegroundColour( wx.Colour( 255, 255, 255 ) )		self.SetBackgroundColour( wx.Colour( 230, 255, 196 ) )		html = wx.html.HtmlWindow(self) 		html.LoadPage("guide.html")############################################################################# Class mainFrame###########################################################################class mainFrame ( wx.Frame ):	max_photo_size = 150	num_entries = 0	sheetfile = ''	importWb = None	import_active_sheet = None	wb = None	sheet = None	# Keeps track of the active row in Import Details mode	active_row = 2	# Make dictionary to hold image filenames in "order" 	image_dict = dict(i1 = "", i2 = "", i3 = "", i4 = "", i5 = "")	# Filename for image add mode	imported_filepath = ''	# keep track of sizes 	sizes = ["XS", "S", "M", "L", "XL", "XXL"]	conditions = ["Good", "Very Good", "Excellent"]	qualities = ["Good", "Better", "Best"]	furChoices = [ u"Sheared Beaver", u"Sheared Mink", u"Mink", u"Beaver", u"Fox", u"Lamb", u"Swakara", u"Shearling", u"Coyote", u"Raccoon", u"Sable", u"Other" ]	garmentChoices = [ u"Coat", u"Jacket", u"Stroller", u"Stole", u"Hat", u"Gloves" ]	# In response to WooCommerce updating its import requirements, take	# the local image names from the image dictionary and modify them	# to reflect their URLs in the website's Media Library	def rename_images(self):		year_mo = datetime.datetime.now()		url_prefix = "https://www.mcelroyvintage.com/wp-content/uploads/" + str(year_mo.year) + "/" + year_mo.strftime("%m") + "/"		dict_len = len(self.image_dict)		for x in range(1, dict_len + 1):			print("DICTLEN: " + str(dict_len))			print("X:" + str(x))			print(self.image_dict)			if self.image_dict["i" + str(x)] != '':				new = url_prefix + self.image_dict["i" + str(x)].split('.')[0] + "." + self.image_dict["i" + str(x)].split('.')[1]				self.image_dict["i" + str(x)] = new	# Define function for creating a new Excel import spreadsheet	def new_template_spreadsheet(self, sheet):		# set up 1-line column titles for WooCommerce import compatibility				titles = ["ÔªøID", "Type", "SKU", "Name", "Published", "Is featured?",		"Visibility in catalog", "Short description", "Description", 		"Date sale price starts", "Date sale price ends", 		"Tax status", "Tax class", "In stock?", "Stock", "Backorders allowed?",		"Sold individually?", "Weight (lbs)", "Length (in)", "Width (in)",		"Height (in)", "Allow customer reviews", "Purchase note", "Sale price", 		"Regular price", "Categories", "Tags", "Shipping class", "Images", "Download limit", 		"Download expiry days", "Parent", "Grouped products", "Upsells", 		"Cross-sells", "External URL", "Button text", "Position", 		"Meta: video_width", "Meta: video_height", "Meta: video_position", 		"Meta: product_instagram_hashtag", "Meta: custom_badges_text", 		"Meta: _is_new", "Meta: _wpas_done_all"]				for i in range( len(titles) ):			self.sheet[get_column_letter( i + 1 ) + str(1)] = titles[i]		# Delete extraneous 'special char' column 		self.sheet.delete_cols(1, 1)			# Safety check: make sure all fields are filled	# returns true if all filled & all numerical fields are ints	# 	def check_fields_filled(self):		err = wx.MessageDialog(self, "Please enter numbers where requested", "Error!", wx.ICON_WARNING)		try: 			int(self.price.GetValue())		except:			err.ShowModal()			return False		try:			int(self.slen.GetValue())		except:			err.ShowModal()			return False		try:			int(self.length.GetValue())		except:			err.ShowModal()			return False		# Now that the type-checking is done, check that all necessary fields are populated		if (self.name.GetValue() != '' and self.length.GetValue() != ''		and self.price.GetValue() != '' and self.slen.GetValue() != '' 		and self.style.GetValue() != '' and self.designer.GetValue() != ''):			return True		else:			err.SetMessage("Please fill all fields before proceeding")			err.ShowModal()			return False	# event handler for SAVE button	def on_click_save(self, event):		self.save_sheet()		self.save_btn.SetLabel("Saved") # for DEBUGGING purposes ONLY!		bt = event.GetEventObject().GetLabel()	# Event handler for HELP  -- May not be any use now	def on_click_help(self, event):		# on click, open a supplemental window with tips & a guide		# Use wx About Dialog (or aboutBox or whatever it's called)		# Also include software information and McElroy logo on about 		# screen 		html = htmlFrame(None, 'Help Guide')		#html.LoadPage("guide.html")		html.Show() 	# Open an existing Excel spreadsheet and add listings to it	def on_click_edit_existing(self, event):		# TODO: filedialog here, grab an XLSX		openfile = wx.FileDialog(self, "Open", "", "", "Excel files (*.xlsx)|*.xlsx", wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)		openfile.ShowModal()		global fname		fname = openfile.GetPath().split("/")[-1]		print(fname + ": FNAME") # DEBUG		self.wb = openpyxl.load_workbook(openfile.GetPath())		self.sheet = self.wb.active		print("Success! \n " + self.sheet.title) # DEBUG		# Now move the current index to the first empty row in the sheet		print(str(self.sheet.max_row)) # DEBUG		self.num_entries = (self.sheet.max_row - 1)	# Handle exit command	def on_click_exit(self, event):		mssg = wx.MessageDialog(self, "Save before closing?", "Save Check", wx.YES_NO|wx.CANCEL|wx.ICON_QUESTION)		val = mssg.ShowModal() # 5103 for YES, 5104 for NO, 5101 for CANCEL		if val == 5103:			self.save_sheet()			sys.exit()		elif val == 5104:			sys.exit()		print("EXIT CLICKED: " + str(val))	# Save spreadsheet to current directory	def save_sheet(self):		#csv_name = fname.split(".")[0] + ".csv"		#print("SAVING TO: " + csv_name)		if not path.exists(fname):			self.wb.save(fname)		#		print("FILENAME: " + fname)		wb = xlrd.open_workbook(fname)		sh = wb.sheet_by_index(0)		csv_name = fname.split('.')[0] + ".csv"		csv_out = open(csv_name, 'w')		wr = csv.writer(csv_out, quoting=csv.QUOTE_ALL)			for rownum in range(sh.nrows):			wr.writerow(sh.row_values(rownum))		# Save CSV		csv_out.close()		# Save XLSX		self.wb.save(filename = fname)	# Translates DB abbreviations for fur labels into legible format	def translate_label(self, label):		translated = ''		if (label == 'MCROY'):			translated = 'McElroy'		elif (label == 'NEIMAR'):			translated = 'Neiman Marcus'		elif (label == 'REVILLON'):			translated = ''		elif (label == 'IMAG'):			translated = ''		elif (label == 'MFCO'):			translated = ''		elif (label == 'GRBR'):			translated = ''		elif (label == 'EVANS'):			translated = ''		elif (label == 'VCTR'):			translated = ''		elif (label == 'ZUKI'):			translated = ''		elif (label == 'RSNF'):			translated = ''		elif (label == 'MYSEL'):			translated = ''		elif (label == 'HGLD PK'):			translated = ''		elif (label == 'DION'):			translated = ''		return translated	# Open DB spreadsheet and parse	def on_click_import_data(self, event):		openfile = wx.FileDialog(self, "Open", "", "", "Excel files (*.xlsx)|*.xlsx", wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)		openfile.ShowModal()		global fname		fname = openfile.GetPath().split("/")[-1]		print(fname + " :FNAME")# DEBUG		self.importWb = openpyxl.load_workbook(openfile.GetPath())		self.import_active_sheet = self.importWb.active		print("Success! Opened sheet: " + self.import_active_sheet.title)		#import_index = 2 # Starts @ 2 b/c 1-based and 1st row is titles		# Now create a new spreadsheet		self.wb = openpyxl.Workbook()		self.sheet = self.wb.active		self.sheet.title = 'Bulk Import ' + str(date.today())		self.new_template_spreadsheet(self.sheet)		#global fname		fname = 'Products ' + str(date.today()) + '.xlsx'		# Save current file as imported file 		ias = self.import_active_sheet		# Read in info and write it to our new spreadsheet		for import_index in range(ias.max_row - 1):			sti = str(import_index + 2)			if (ias['P' + sti].value != 'Yes'):				import_index += 1			# If not already on site, proceed			product = ias['D' + sti].value 			inven = ias['B' + sti].value			n_size = ias['F' + sti].value			b_style = ias['L' + sti].value			coat_len = ias['G' + sti].value			sleeve_len = ias['M' + sti].value			ticket_price = ias['N' + sti].value			coat_cond = ias['Q' + sti].value			coat_qual = ias['R' + sti].value			coat_rev = ias['S' + sti].value			#coat_cat = ias['O' + sti].value			lbl = self.translate_label(ias['K' + sti].value)			full_desc = ''			full_desc += "Size: " + n_size + "\\n\\n"			full_desc += "Length: " + coat_len + "\"\\n\\n"			full_desc += "Body Style: " + self.format_body_style(b_style) + "\\n\\n"			full_desc += "Sleeve Length: " + sleeve_len + "\"\\n\\n"			full_desc += "Designer/Label: " + lbl + "\\n\\n"			full_desc += "Condition: " + coat_cond + "\\n\\n"			full_desc += "Quality: " + coat_qual + "\\n\\n"			full_desc += "Item: " + inven			# DEBUG			#print("TESTING IMPORT")			#print(full_desc)			#print("____________________________")			# Add in constant data: e.g. toggles, dimensions			self.sheet['A' + sti] = 'simple'    # 'WooCommerce Simple Product'			self.sheet['D' + sti] = 1 		     # Product published    -  True			self.sheet['E' + sti] = 0 		     # Product featured?    -  False			self.sheet['F' + sti] = 'visible'   # Product visible?     -  True			self.sheet['K' + sti] = 'taxable'   # Product taxable?     -  True			self.sheet['M' + sti] = 1			 # In stock?     -  One			self.sheet['O' + sti] = 0			 # Backorders allowed?  -  False			self.sheet['P' + sti] = 1			 # Sold individually?   -  True			self.sheet['U' + sti] = 0			 # Allow reviews?	    -  False			self.sheet['AK' + sti] = 0		     # Position 			-  Disabled			self.sheet['AL' + sti] = 1024		 # Video width 		    -  1024 px			self.sheet['AM' + sti] = 768		 # Video height 		-  768 px			self.sheet['AN' + sti] = 2		     # Video position 	    -  2nd in image queue			self.sheet['AP' + sti] = 0		     # Enable 'New' tag?    -  False			self.sheet['AR' + sti] = 1		     # WordPress meta tag   -  True			self.sheet['G' + sti] = full_desc			self.sheet['B' + sti] = inven			self.sheet['C' + sti] = product			self.sheet['X' + sti] = self.price.GetValue()			#self.sheet['AC' + currIndex] = pics			categories = self.convert_categories(product, coat_rev)			self.sheet['Y' + sti] = categories		# Save imported data in sheet as XLSX		self.wb.save(filename = fname)		#self.save_sheet()		self.enter_image_add_mode()		self.previous_btn.Enable()		self.next_btn.Enable()	# Convert DB category strings to WooCommerce product categories	def convert_categories(self, cat_string, reversible):		site_cats = ['Mink', 'Sheared Mink', 'Shearling', 'Sable',		'Sheared Beaver', 'Long Hair Beaver', 'Lamb', 'Fox',		'Lynx', 'Coyote', 'Raccoon', 'Swakara']		if ('with' in cat_string):			temp = cat_string.split(" with")		else:			temp = cat_string.split(" With")		terms = temp[0].split(" ")		#for k in range(len(terms)):		#	print("Term: " + str(k) + " " + terms[k])		coat_type = terms[-1]		new_cat = coat_type + 's, '		if (coat_type =='Jacket' or coat_type == 'Stroller'):			coat_type =  'Jackets &amp; Strollers'		elif (coat_type == 'Coat'):			coat_type = 'Coats'		coat_fur_base = terms[-2]		if (coat_fur_base == 'Mink' or coat_fur_base == 'Beaver'):			if (terms[-3] == 'Sheared'):				coat_fur_base = "Sheared " + coat_fur_base		if (coat_fur_base == 'Beaver' and terms[-3] != 'Sheared'):			coat_fur_base = 'Long Hair ' + coat_fur_base		# Check whether fur type is a web category		if (not coat_fur_base in site_cats):			if (coat_fur_base == 'Broadtail'):				coat_fur_base = "Lamb"			else:				coat_fur_base = 'Other'		new_cat += coat_fur_base + " > " + coat_type 		if (reversible == 'Yes'):			new_cat += ", Reversible > " + coat_type		return new_cat	# Format body style for imports correctly	def format_body_style(self, body):		if (body == 'ALINE'):			out = "A - Line"		else:			out = body[0].upper() + body[1:].lower()		return out	# Add product to sheet using entered information	# Will create a new sheet when clicked the first time	# Clears user input in preparation for the next listing	def new_product(self, sheet):		print("NUMENT: " + str(self.num_entries))		if self.num_entries == 0:			# Create a new spreadsheet			self.wb = openpyxl.Workbook()			self.sheet = self.wb.active			self.sheet.title = 'Bulk Import ' + str(date.today())			self.new_template_spreadsheet(sheet)			global fname			fname = 'Products ' + str(date.today()) + '.xlsx' 				# Now grab product info and add it into the sheet		currIndex = str(self.num_entries + 2)		print("Currindex: " + currIndex)		# Add in constant data: e.g. toggles, dimensions		self.sheet['A' + currIndex] = 'simple'    # 'WooCommerce Simple Product'		self.sheet['D' + currIndex] = 1 		     # Product published    -  True		self.sheet['E' + currIndex] = 0 		     # Product featured?    -  False		self.sheet['F' + currIndex] = 'visible'   # Product visible?     -  True		self.sheet['K' + currIndex] = 'taxable'   # Product taxable?     -  True		self.sheet['M' + currIndex] = 1			 # Number in stock?     -  One		self.sheet['O' + currIndex] = 0			 # Backorders allowed?  -  False		self.sheet['P' + currIndex] = 1			 # Sold individually?   -  True		self.sheet['U' + currIndex] = 0			 # Allow reviews?	    -  False		self.sheet['AK' + currIndex] = 0		     # Position 			-  Disabled		self.sheet['AL' + currIndex] = 1024		 # Video width 		    -  1024 px		self.sheet['AM' + currIndex] = 768		 # Video height 		-  768 px		self.sheet['AN' + currIndex] = 2		     # Video position 	    -  2nd in image queue		self.sheet['AQ' + currIndex] = 0		     # Enable 'New' tag?    -  False		self.sheet['AR' + currIndex] = 1		     # WordPress meta tag   -  True		# Now add in user-entered data		short_desc = ''		short_desc += "Size: " + self.size.GetString(self.size.GetCurrentSelection()) + "\\n\\n"		short_desc += "Length: " + self.length.GetValue() + "\"\\n\\n"		short_desc += "Body Style: " + self.style.GetValue() + "\"\\n\\n"		short_desc += "Sleeve Length: " + self.slen.GetValue() + "\\n\\n"		short_desc += "Designer/Label: " + self.designer.GetValue() + "\\n\\n"		short_desc += "Condition: " + self.cond.GetString(self.cond.GetCurrentSelection()) + "\\n\\n"		short_desc += "Quality: " + self.qual.GetString(self.qual.GetCurrentSelection()) + "\\n\\n"		short_desc += "Item: " + self.item.GetValue()		# Create image string from user-slected files		self.rename_images()		pics = ''		pics += self.image_dict["i1"]		if self.image_dict["i2"] != "":			pics += ", " + self.image_dict["i2"]		if self.image_dict["i3"] != "":			pics += ", " + self.image_dict["i3"]		if self.image_dict["i4"] != "":			pics += ", " + self.image_dict["i4"]		if self.image_dict["i5"] != "":			pics += ", " + self.image_dict["i5"]		#print("PICS: " + pics) #DEBUG info : picture filenames		# Create category string from user input		fur_cat =  self.garment.GetString(self.garment.GetCurrentSelection()) + 's'						if fur_cat == 'Strollers' or fur_cat == 'Jackets':			fur_cat = 'Jackets & Strollers'		elif fur_cat == 'Glovess':			fur_cat = 'Gloves'				categories = self.fur.GetString(self.fur.GetCurrentSelection()) + " > " + fur_cat		#if self.uniq.GetValue() == True:  # if item is unique		#	categories += ", One of a kind"		if self.rev.GetValue() == True:  # if garment is reversible			categories += ", Reversible > " + self.garment.GetString(self.garment.GetCurrentSelection())		self.sheet['G' + currIndex] = short_desc		self.sheet['B' + currIndex] = self.item.GetValue()		self.sheet['C' + currIndex] = self.name.GetValue()		self.sheet['X' + currIndex] = self.price.GetValue()		self.sheet['AB' + currIndex] = pics		self.sheet['Y' + currIndex] = categories		if (self.check_fields_filled()):			self.save_sheet()			self.num_entries += 1 # increment entry count & move to the next row/entry			# Clear user input for next entry			self.clear_user_input()		########################		# END ADD NEW METHOD   #		########################	# Returns true if all fields filled, false otherwise	# grabs data from GUI fields and writes it to active spreadsheet	def write_field_data(self):		in_sheet = self.import_active_sheet		reading_row = str(self.active_row)		# Add in constant data: e.g. toggles, dimensions		in_sheet['A' + reading_row] = 'simple'    # 'WooCommerce Simple Product'		in_sheet['D' + reading_row] = 1 		     # Product published    -  True		in_sheet['E' + reading_row] = 0 		     # Product featured?    -  False		in_sheet['F' + reading_row] = 'visible'   # Product visible?     -  True		in_sheet['K' + reading_row] = 'taxable'   # Product taxable?     -  True		in_sheet['M' + reading_row] = 1			 # Number in stock?     -  One		in_sheet['O' + reading_row] = 0			 # Backorders allowed?  -  False		in_sheet['P' + reading_row] = 1			 # Sold individually?   -  True		in_sheet['U' + reading_row] = 0			 # Allow reviews?	    -  False		in_sheet['AK' + reading_row] = 0		     # Position 			-  Disabled		in_sheet['AL' + reading_row] = 1024		 # Video width 		    -  1024 px		in_sheet['AM' + reading_row] = 768		 # Video height 		-  768 px		in_sheet['AN' + reading_row] = 2		     # Video position 	    -  2nd in image queue		in_sheet['AQ' + reading_row] = 0		     # Enable 'New' tag?    -  False		in_sheet['AR' + reading_row] = 1		     # WordPress meta tag   -  True		# Now add in user-entered data		short_desc = ''		short_desc += "Size: " + self.size.GetString(self.size.GetCurrentSelection()) + "\\n\\n"		short_desc += "Length: " + self.length.GetValue() + "\"\\n\\n"		short_desc += "Body Style: " + self.style.GetValue() + "\"\\n\\n"		short_desc += "Sleeve Length: " + self.slen.GetValue() + "\\n\\n"		short_desc += "Designer/Label: " + self.designer.GetValue() + "\\n\\n"		short_desc += "Condition: " + self.cond.GetString(self.cond.GetCurrentSelection()) + "\\n\\n"		short_desc += "Quality: " + self.qual.GetString(self.qual.GetCurrentSelection()) + "\\n\\n"		short_desc += "Item: " + self.item.GetValue()		# Create image string from user-slected files		self.rename_images()		pics = ''		pics += self.image_dict["i1"]		if self.image_dict["i2"] != "":			pics += ", " + self.image_dict["i2"]		if self.image_dict["i3"] != "":			pics += ", " + self.image_dict["i3"]		if self.image_dict["i4"] != "":			pics += ", " + self.image_dict["i4"]		if self.image_dict["i5"] != "":			pics += ", " + self.image_dict["i5"]		#print("PICS: " + pics) #DEBUG info : picture filenames		# Create category string from user input		categories = self.fur.GetString(self.fur.GetCurrentSelection()) + " > " + self.garment.GetString(self.garment.GetCurrentSelection())		#if self.uniq.GetValue() == True:  # if item is unique		#	categories += ", One of a kind"		if self.rev.GetValue() == True:  # if garment is reversible			categories += ", Reversible > " + self.garment.GetString(self.garment.GetCurrentSelection())		in_sheet['G' + reading_row] = short_desc		in_sheet['B' + reading_row] = self.item.GetValue()		in_sheet['C' + reading_row] = self.name.GetValue()		in_sheet['X' + reading_row] = self.price.GetValue()		in_sheet['AC' + reading_row] = pics		#in_sheet['Z' + reading_row] = categories # More correct when imported, so can't fix here		# Save changes to sheet		self.importWb.save(filename = fname)	def clear_user_input(self):		self.name.Clear()		self.length.Clear()		self.price.Clear()		self.slen.Clear()		self.item.Clear()		self.style.Clear()		self.cond.SetSelection(0)		self.qual.SetSelection(0)		self.size.SetSelection(0)		self.fur.SetSelection(0)		self.garment.SetSelection(0)		self.designer.Clear()		#self.uniq.SetValue(False)		self.rev.SetValue(False)		# Clear image dictionary		self.image_dict = dict(i1 = "", i2 = "", i3 = "", i4 = "", i5 = "")		# Clear images & replace with placeholders		self.onView(None)		self.onView1(None)		self.onView2(None)		self.onView3(None)		self.onView4(None)	def on_click_clear(self, event):		self.clear_user_input()	# Switches the active file & spreadsheet to the one we just produced using ID mode	def enter_image_add_mode(self):		self.importWb = openpyxl.load_workbook(fname)		self.import_active_sheet = self.importWb.active		# Reset row counter to beginning of sheet		self.active_row = 2		print("Success! Opened sheet: " + self.import_active_sheet.title)		self.autofill()	# Reads data from a row and uses it to populate fields in the user-facing GUI	# Used when pairing pictures with products after using the 'Import Details' 	# option.	def autofill(self):		self.clear_user_input()		ias = self.import_active_sheet		i = str(self.active_row)		print(self.imported_filepath)		long_desc = ias['G' + i].value.split('\\n\\n', 8)		#for i in long_desc:		#	print("LDE: " + i)		index = 0		self.name.SetValue( ias['C' + i].value )		for s in range( len(self.sizes) ):			if (long_desc[0].split(': ')[1].strip() == self.sizes[s]):				index = s		self.size.SetSelection( index ) # May fail due to wrong params #TODO fix this so it works		self.length.SetValue( long_desc[1].split(': ')[1][:-1] )		self.style.SetValue( long_desc[2].split(': ')[1] )		self.slen.SetValue( long_desc[3].split(': ')[1][:-1] )		self.designer.SetValue( long_desc[4].split(': ')[1] )		c_index = 0		for c in range( len(self.conditions) ):			if (long_desc[5].split(': ')[1] == self.conditions[c]):				c_index = c		self.cond.SetSelection( c_index )		q_index = 0		for q in range( len(self.qualities) ):			if (long_desc[6].split(': ')[1] == self.qualities[q]):				q_index = q		self.cond.SetSelection( q_index )		self.item.SetValue( ias['B' + i].value )		f_index = 0		catstring = ias['Y' + i].value		furtype = catstring.split(',')[1].split(' >')[0]		for f in range( len(self.furChoices) ):			if ( furtype.upper() == self.furChoices[f].upper()):				f_index = f		self.fur.SetSelection( f_index )		g_index = 0		gartype = catstring.split(',')[0]		for g in range( len(self.garmentChoices) ):			if ( gartype.upper() == self.garmentChoices[g].upper()):				g_index = g		self.garment.SetSelection( g_index )		# Check/uncheck 'Reversible' field/checkbox		self.rev.SetValue( 'Reversible' in catstring )	def on_click_scroll_forward(self, event):		if (self.check_fields_filled()):			self.write_field_data()			self.active_row += 1			self.autofill()			#self.write_field_data()		print("Scrolling forward...")	def on_click_scroll_back(self, event):		if (self.active_row > 2):			self.active_row -= 1			self.autofill()			if (self.check_fields_filled()):				self.write_field_data()		print("Scrolling back...")	def on_mouseover_tooltip(self, event):		tip = "Drag an image here"		self.main_img.SetToolTip(wx.ToolTip(tip))		self.supp_img_1.SetToolTip(wx.ToolTip(tip))		self.supp_img_2.SetToolTip(wx.ToolTip(tip))		self.supp_img_3.SetToolTip(wx.ToolTip(tip))		self.supp_img_4.SetToolTip(wx.ToolTip(tip))	def initUI(self):		self.SetSizeHints( wx.DefaultSize, wx.DefaultSize )		self.SetForegroundColour( wx.Colour( 255, 255, 255 ) )		self.SetBackgroundColour( wx.Colour( 230, 255, 196 ) )		pub.subscribe(self.update_image_on_dnd, 'dnd')		pub.subscribe(self.update_image_on_dnd_1, 'dnd1')		pub.subscribe(self.update_image_on_dnd_2, 'dnd2')		pub.subscribe(self.update_image_on_dnd_3, 'dnd3')		pub.subscribe(self.update_image_on_dnd_4, 'dnd4')				main_sizer = wx.BoxSizer( wx.VERTICAL )		# Place title 		self.title = wx.StaticText( self, wx.ID_ANY, u" McElroy Vintage Spreadsheet", wx.DefaultPosition, wx.DefaultSize, 0 )		self.title.Wrap( -1 )		self.title.SetForegroundColour( wx.Colour( 110, 110, 110 ) )		font = wx.Font(24, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)		self.title.SetFont(font)		main_sizer.Add( self.title, 0, wx.ALL | wx.ALIGN_LEFT, 5 )				desc_panel = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"Description" ), wx.HORIZONTAL )				#desc_grid = wx.FlexGridSizer( 10, 2, 0, 0 ) # Formerly 4 x 6		desc_grid = wx.GridBagSizer(0, 0)		desc_grid.SetEmptyCellSize( (30, 0) )				self.name_lbl = wx.StaticText( self, wx.ID_ANY, u"Description", wx.DefaultPosition, wx.DefaultSize, 0 )		self.name_lbl.Wrap( -1 )		self.name_lbl.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		self.name_lbl.SetToolTip(wx.ToolTip("Name of the listing: e.g. Green Dyed Mink Stole"))				desc_grid.Add( self.name_lbl, pos=(0, 0), flag=wx.ALL|wx.ALIGN_RIGHT, border=5 )				self.name = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		desc_grid.Add( self.name, pos=(0, 1), span=(1, 10), flag=wx.EXPAND | wx.ALL, border=5 )				self.length_lbl = wx.StaticText( self, wx.ID_ANY, u"Length (in)", wx.DefaultPosition, wx.DefaultSize, 0 )		self.length_lbl.Wrap( -1 )		self.length_lbl.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		self.length_lbl.SetToolTip(wx.ToolTip("Coat length in inches"))				desc_grid.Add( self.length_lbl, pos=(3, 0), flag=wx.ALL|wx.ALIGN_RIGHT, border=5 )				self.length = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		desc_grid.Add( self.length, pos=(3, 1), flag=wx.EXPAND | wx.ALL, border=5 )				self.price_lbl = wx.StaticText( self, wx.ID_ANY, u"Price ($)", wx.DefaultPosition, wx.DefaultSize, 0 )		self.price_lbl.Wrap( -1 )		self.price_lbl.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		self.price_lbl.SetToolTip(wx.ToolTip("Listing price in USD"))				desc_grid.Add( self.price_lbl, pos=(1, 0), flag=wx.ALL|wx.ALIGN_RIGHT, border=5 )				self.price = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		desc_grid.Add( self.price, pos=(1, 1), flag=wx.EXPAND | wx.ALL, border=5 )				self.slen_lbl = wx.StaticText( self, wx.ID_ANY, u"Sleeve Length (in)", wx.DefaultPosition, wx.DefaultSize, 0 )		self.slen_lbl.Wrap( -1 )		self.slen_lbl.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		self.slen_lbl.SetToolTip(wx.ToolTip("Sleeve length in inches"))				desc_grid.Add( self.slen_lbl, pos=(5, 0), flag=wx.ALL|wx.ALIGN_RIGHT, border=5 )				self.slen = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		desc_grid.Add( self.slen, pos=(5, 1), flag=wx.EXPAND | wx.ALL, border=5 )				self.item_lbl = wx.StaticText( self, wx.ID_ANY, u"Code", wx.DefaultPosition, wx.DefaultSize, 0 )		self.item_lbl.Wrap( -1 )		self.item_lbl.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		self.item_lbl.SetToolTip(wx.ToolTip("Vintage inventory code: e.g. V-MC 12345"))				desc_grid.Add( self.item_lbl, pos=(9, 0), flag=wx.ALL|wx.ALIGN_RIGHT, border=5 )				self.item = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		desc_grid.Add( self.item, pos=(9, 1), flag=wx.EXPAND | wx.ALL, border=5 )				self.style_lbl = wx.StaticText( self, wx.ID_ANY, u"Body Style", wx.DefaultPosition, wx.DefaultSize, 0 )		self.style_lbl.Wrap( -1 )		self.style_lbl.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		self.style_lbl.SetToolTip(wx.ToolTip("Body styling: e.g. Straight"))				desc_grid.Add( self.style_lbl, pos=(4, 0), flag=wx.ALL|wx.ALIGN_RIGHT, border=5 )				self.style = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		desc_grid.Add( self.style, pos=(4, 1), flag=wx.EXPAND | wx.ALL, border=5 )				self.cond_lbl = wx.StaticText( self, wx.ID_ANY, u"Condition", wx.DefaultPosition, wx.DefaultSize, 0 )		self.cond_lbl.Wrap( -1 )		self.cond_lbl.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		cond_tip = "Condition: \n Excellent: No signs of wear, linging & closures pristine \n "		cond_tip += "Very Good: Light wear to fur or lining, gently used \n Good: more obvious signs of wear, slightly worn fur or minor stains on lining"		self.cond_lbl.SetToolTip(wx.ToolTip(cond_tip))				desc_grid.Add( self.cond_lbl, pos=(7, 0), flag=wx.ALL|wx.ALIGN_RIGHT, border=5 )				#self.cond = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		conditions = ["Good", "Very Good", "Excellent"]		self.cond = wx.Choice(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, conditions, 0)		desc_grid.Add( self.cond, pos=(7, 1), flag=wx.EXPAND | wx.ALL, border=5 )				self.qual_lbl = wx.StaticText( self, wx.ID_ANY, u"Quality", wx.DefaultPosition, wx.DefaultSize, 0 )		self.qual_lbl.Wrap( -1 )		self.qual_lbl.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		qual_tip = "Quality \n Best: Exceptional skins & craftsmanship\n"		qual_tip += "Better: Above average skins & craftsmanship\n"		qual_tip += "Good: Average skins & craftsmanship"		self.qual_lbl.SetToolTip(wx.ToolTip(qual_tip))				desc_grid.Add( self.qual_lbl, pos=(8, 0), flag=wx.ALL|wx.ALIGN_RIGHT, border=5 )				#self.qual = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		qualities = ["Good", "Better", "Best"]		self.qual = wx.Choice(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, qualities, 0)		desc_grid.Add( self.qual, pos=(8, 1), flag=wx.EXPAND | wx.ALL, border=5 )				self.designer_lbl = wx.StaticText( self, wx.ID_ANY, u"Designer/Label", wx.DefaultPosition, wx.DefaultSize, 0 )		self.designer_lbl.Wrap( -1 )		self.designer_lbl.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		self.designer_lbl.SetToolTip(wx.ToolTip("Fur's designer"))				desc_grid.Add( self.designer_lbl, pos=(6, 0), flag=wx.ALL|wx.ALIGN_RIGHT, border=5 )				self.designer = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0 )		desc_grid.Add( self.designer, pos=(6, 1), flag=wx.EXPAND | wx.ALL, border=5 )		self.size_lbl = wx.StaticText( self, wx.ID_ANY, u"Size", wx.DefaultPosition, wx.DefaultSize, 0 )		self.size_lbl.Wrap( -1 )		self.size_lbl.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		self.size_lbl.SetToolTip(wx.ToolTip("Fur size"))		sizes = ["XS", "S", "M", "L", "XL", "XXL"]		self.size = wx.Choice(self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, sizes, 0)		desc_grid.Add(self.size_lbl, pos=(2, 0), flag=wx.ALL|wx.ALIGN_RIGHT, border=5)		desc_grid.Add(self.size, pos=(2, 1), flag=wx.EXPAND | wx.ALL, border=5)		desc_panel.Add( desc_grid, 1, wx.SHAPED, 5 ) # Formerly wx.SHAPED				main_sizer.Add( desc_panel, 1, wx.EXPAND, 5 )				#cat_panel = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"Categories" ), wx.VERTICAL )				#cat_grid = wx.GridBagSizer( 0, 0 ) # Formerly GridSizer 2 4 0 0		#cat_grid.SetEmptyCellSize( (15, 0) )				self.fur_lbl = wx.StaticText( self, wx.ID_ANY, u"Fur Type", wx.DefaultPosition, wx.DefaultSize, 0 )		self.fur_lbl.Wrap( -1 )		self.fur_lbl.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		self.fur_lbl.SetToolTip(wx.ToolTip("The kind of fur the garment is made of"))				desc_grid.Add( self.fur_lbl, pos=(10, 0), flag=wx.ALL|wx.ALIGN_RIGHT, border=5 )				furChoices = [ u"Sheared Beaver", u"Sheared Mink", u"Mink", u"Beaver", u"Fox", u"Lamb", u"Swakara", u"Shearling", u"Coyote", u"Raccoon", u"Sable", u"Other" ]		self.fur = wx.Choice( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, furChoices, 0 )		self.fur.SetSelection( 0 )		self.fur.SetForegroundColour( wx.Colour( 0, 128, 0 ) )				desc_grid.Add( self.fur, pos=(10, 1), flag=wx.ALL|wx.ALIGN_RIGHT, border=5 )				self.garment_lbl = wx.StaticText( self, wx.ID_ANY, u"Garment Type", wx.DefaultPosition, wx.DefaultSize, 0 )		self.garment_lbl.Wrap( -1 )		self.garment_lbl.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		self.garment_lbl.SetToolTip(wx.ToolTip("The kind of garment this listing is for"))				desc_grid.Add( self.garment_lbl, pos=(11, 0), flag=wx.ALL|wx.ALIGN_RIGHT, border=5 )				garmentChoices = [ u"Coat", u"Jacket", u"Stroller", u"Stole", u"Hat", u"Gloves" ]		self.garment = wx.Choice( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, garmentChoices, 0 )		self.garment.SetSelection( 0 )		desc_grid.Add( self.garment, pos=(11, 1), flag=wx.ALL, border=5 )				#self.uniq = wx.CheckBox( self, wx.ID_ANY, u"One of a kind", wx.DefaultPosition, wx.DefaultSize, 0 )		#self.uniq.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		#self.uniq.SetToolTip(wx.ToolTip("Add this item to the 'One fo a kind' category"))				#desc_grid.Add( self.uniq, pos=(12, 1), flag=wx.ALL, border=5 )				self.rev = wx.CheckBox( self, wx.ID_ANY, u"Reversible", wx.DefaultPosition, wx.DefaultSize, 0 )		self.rev.SetToolTip(wx.ToolTip("Is the garment reversible?"))		desc_grid.Add( self.rev, pos=(12, 1), flag=wx.ALL, border=5 )				#cat_panel.Add( cat_grid, 1, wx.SHAPED, 5 )				#main_sizer.Add( cat_panel, 1, wx.EXPAND, 5 )		# Image panel		self.fdm = DropTarget(self, 'm')		self.fd1 = DropTarget(self, '1')		self.fd2 = DropTarget(self, '2')		self.fd3 = DropTarget(self, '3')		self.fd4 = DropTarget(self, '4')				img_panel = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"Images" ), wx.VERTICAL )		self.instructions = wx.StaticText(self, wx.ID_ANY, u"Drag and drop images onto the tiles to import them", wx.DefaultPosition, wx.DefaultSize, 0)		self.instructions.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		img_panel.Add( self.instructions, 0, wx.ALL, 5 )		img_grid = wx.GridSizer( 1, 5, 0, 0 )				self.main_img = wx.StaticBitmap( self, wx.ID_ANY, wx.Bitmap( u"placeholdermain.jpg", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.DefaultSize, 0 )		img_grid.Add( self.main_img, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )		self.main_img.SetDropTarget(self.fdm)		self.main_img.Bind(wx.EVT_MOTION, self.on_mouseover_tooltip)				self.supp_img_1 = wx.StaticBitmap( self, wx.ID_ANY, wx.Bitmap( u"placeholder1.jpg", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.DefaultSize, 0 )		img_grid.Add( self.supp_img_1, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )		self.supp_img_1.SetDropTarget(self.fd1)				self.supp_img_2 = wx.StaticBitmap( self, wx.ID_ANY, wx.Bitmap( u"placeholder2.jpg", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.DefaultSize, 0 )		img_grid.Add( self.supp_img_2, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )		self.supp_img_2.SetDropTarget(self.fd2)		self.supp_img_3 = wx.StaticBitmap( self, wx.ID_ANY, wx.Bitmap( u"placeholder3.jpg", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.DefaultSize, 0 )		img_grid.Add( self.supp_img_3, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )		self.supp_img_3.SetDropTarget(self.fd3)				self.supp_img_4 = wx.StaticBitmap( self, wx.ID_ANY, wx.Bitmap( u"placeholder4.jpg", wx.BITMAP_TYPE_ANY ), wx.DefaultPosition, wx.DefaultSize, 0 )		img_grid.Add( self.supp_img_4, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5 )		self.supp_img_4.SetDropTarget(self.fd4)				img_panel.Add( img_grid, 1, wx.EXPAND, 5 )				main_sizer.Add( img_panel, 1, wx.EXPAND, 5 )				button_grid = wx.GridSizer( 2, 5, 0, 0 )				self.add_btn = wx.Button( self, wx.ID_ANY, u"Add Item", wx.DefaultPosition, wx.DefaultSize, 0 )		self.add_btn.SetForegroundColour( wx.Colour( 0, 128, 0 ) )		self.add_btn.Bind(wx.EVT_BUTTON, self.new_product)				button_grid.Add( self.add_btn, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )				self.save_btn = wx.Button( self, wx.ID_SAVE, u"Save Spreadsheet", wx.DefaultPosition, wx.DefaultSize, 0 )		button_grid.Add( self.save_btn, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )		self.save_btn.Bind(wx.EVT_BUTTON, self.on_click_save)		self.clear_btn = wx.Button( self, wx.ID_SAVE, u"Clear Fields", wx.DefaultPosition, wx.DefaultSize, 0 )		button_grid.Add( self.clear_btn, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )		self.clear_btn.Bind(wx.EVT_BUTTON, self.on_click_clear)				self.open_btn = wx.Button( self, wx.ID_ANY, u"Open Existing", wx.DefaultPosition, wx.DefaultSize, 0 )		button_grid.Add( self.open_btn, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )		self.open_btn.Bind(wx.EVT_BUTTON, self.on_click_edit_existing)		self.quit_btn = wx.Button( self, wx.ID_ANY, u"Quit", wx.DefaultPosition, wx.DefaultSize, 0 )		button_grid.Add( self.quit_btn, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )		self.quit_btn.Bind(wx.EVT_BUTTON, self.on_click_exit)		self.help_btn = wx.Button( self, wx.ID_ANY, u"Help", wx.DefaultPosition, wx.DefaultSize, 0 )		button_grid.Add( self.help_btn, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )		self.help_btn.Bind(wx.EVT_BUTTON, self.on_click_help)		self.parse_btn = wx.Button( self, wx.ID_ANY, u"Import Details", wx.DefaultPosition, wx.DefaultSize, 0 )		button_grid.Add( self.parse_btn, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5 )		self.parse_btn.Bind(wx.EVT_BUTTON, self.on_click_import_data)		self.parse_btn.SetToolTip(wx.ToolTip("Import listing details from McElroy vintage database spreadsheet"))		# Row-Nav buttons for adding pictures to freshly imported rows		# Are disabled by default and only enabled after selecting 'Import Details'		self.previous_btn = wx.Button(self, wx.ID_ANY, " < Previous", wx.DefaultPosition, wx.DefaultSize, 0)		button_grid.Add(self.previous_btn, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)		self.previous_btn.Bind(wx.EVT_BUTTON, self.on_click_scroll_back)		self.previous_btn.SetToolTip(wx.ToolTip("Return to the previous product listing"))		self.previous_btn.Disable()		self.next_btn = wx.Button(self, wx.ID_ANY, "Next > ", wx.DefaultPosition, wx.DefaultSize, 0)		button_grid.Add(self.next_btn, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)		self.next_btn.Bind(wx.EVT_BUTTON, self.on_click_scroll_forward)		self.next_btn.SetToolTip(wx.ToolTip("Advance to the next product listing"))		self.next_btn.Disable()				main_sizer.Add( button_grid, 1, wx.SHAPED, 5 )				self.SetSizer( main_sizer )		self.Layout()		self.SetMinSize(self.GetSize())		self.Centre( wx.BOTH )		##############################		##    END INITUI METHOD     ##		##############################	def __init__( self, parent ):		wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = 'WooCommerce Import Spreadsheet Generator', pos = wx.DefaultPosition, size = wx.Size( 830,830 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )		# Set a pretty icon for desktop use		#icon = wx.EmptyIcon()		# TODO FIX THIS (!)		#icon.CopyFromBitmap(wx.Bitmap("cropped-Green-M-logo.ijpg", wx.BITMAP_TYPE_ANY))		#self.SetIcon(icon)		self.initUI()		def __del__( self ):		pass	def update_image_on_dnd(self, filepath):		self.onView(filepath=filepath)		self.image_dict["i1"] = filepath.split('/')[-1]	def update_image_on_dnd_1(self, filepath):		self.onView1(filepath=filepath)		self.image_dict["i2"] = filepath.split('/')[-1]	def update_image_on_dnd_2(self, filepath):		self.onView2(filepath=filepath)		self.image_dict["i3"] = filepath.split('/')[-1]	def update_image_on_dnd_3(self, filepath):		self.onView3(filepath=filepath)		self.image_dict["i4"] = filepath.split('/')[-1]	def update_image_on_dnd_4(self, filepath):		self.onView4(filepath=filepath)		self.image_dict["i5"] = filepath.split('/')[-1]	def onView(self, filepath=None):		if not filepath: 			filepath = 'placeholdermain.jpg'		img = wx.Image(filepath, wx.BITMAP_TYPE_ANY)		# scale the image, preserving the aspect ratio		W = img.GetWidth()		H = img.GetHeight()		if W > H:		    NewW = self.max_photo_size		    NewH = self.max_photo_size * H / W		else:		    NewH = self.max_photo_size		    NewW = self.max_photo_size * W / H		img = img.Scale(int(NewW), int(NewH))		self.ii = filepath.split('/')[-1]		self.main_img.SetBitmap(wx.Bitmap(img))	def onView1(self, filepath=None):		if not filepath: 			filepath = 'placeholder1.jpg'		img = wx.Image(filepath, wx.BITMAP_TYPE_ANY)		# scale the image, preserving the aspect ratio		W = img.GetWidth()		H = img.GetHeight()		if W > H:			NewW = self.max_photo_size			NewH = self.max_photo_size * H / W		else:			NewH = self.max_photo_size			NewW = self.max_photo_size * W / H		img = img.Scale(int(NewW), int(NewH))		self.supp_img_1.SetBitmap(wx.Bitmap(img))	def onView2(self, filepath=None):		if not filepath: 			filepath = 'placeholder2.jpg'		img = wx.Image(filepath, wx.BITMAP_TYPE_ANY)		# scale the image, preserving the aspect ratio		W = img.GetWidth()		H = img.GetHeight()		if W > H:			NewW = self.max_photo_size			NewH = self.max_photo_size * H / W		else:			NewH = self.max_photo_size			NewW = self.max_photo_size * W / H		img = img.Scale(int(NewW), int(NewH))		self.supp_img_2.SetBitmap(wx.Bitmap(img))	def onView3(self, filepath=None):		if not filepath: 			filepath = 'placeholder3.jpg'		img = wx.Image(filepath, wx.BITMAP_TYPE_ANY)		# scale the image, preserving the aspect ratio		W = img.GetWidth()		H = img.GetHeight()		if W > H:			NewW = self.max_photo_size			NewH = self.max_photo_size * H / W		else:			NewH = self.max_photo_size			NewW = self.max_photo_size * W / H		img = img.Scale(int(NewW), int(NewH))		self.supp_img_3.SetBitmap(wx.Bitmap(img))	def onView4(self, filepath=None):		if not filepath: 			filepath = 'placeholder4.jpg'		img = wx.Image(filepath, wx.BITMAP_TYPE_ANY)		# scale the image, preserving the aspect ratio		W = img.GetWidth()		H = img.GetHeight()		if W > H:			NewW = self.max_photo_size			NewH = self.max_photo_size * H / W		else:			NewH = self.max_photo_size			NewW = self.max_photo_size * W / H		img = img.Scale(int(NewW), int(NewH))		self.supp_img_4.SetBitmap(wx.Bitmap(img))	if __name__ == '__main__':	app = wx.App()	mf = mainFrame(None)	mf.Show()	app.MainLoop()